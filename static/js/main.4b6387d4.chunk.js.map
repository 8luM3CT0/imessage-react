{"version":3,"sources":["features/userSlice.js","features/chatSlice.js","Message.js","firebase.js","Chat.js","SidebarChat.js","Sidebar.js","IMessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","chatSlice","chatId","chatName","setChat","selectChatName","chat","selectChatId","Message","forwardRef","ref","id","contents","timestamp","email","displayName","message","photo","uid","useSelector","className","Avatar","src","Date","toDate","toLocaleString","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","value","onChange","e","target","placeholder","type","onClick","preventDefault","add","FieldValue","serverTimestamp","IconButton","SidebarChat","dispatch","useDispatch","chatInfo","setChatInfo","timeago","Sidebar","chats","setChats","signOut","variant","prompt","IMessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b6387d4.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const chatSlice = createSlice({\r\n  name: \"chat\",\r\n  initialState: {\r\n    chatId: null,\r\n    chatName: null,\r\n  },\r\n  reducers: {\r\n    setChat: (state, action) => {\r\n      state.chatId = action.payload.chatId;\r\n      state.chatName = action.payload.chatName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions;\r\n\r\nexport const selectChatName = (state) => state.chat.chatName;\r\nexport const selectChatId = (state) => state.chat.chatId;\r\n\r\nexport default chatSlice.reducer;\r\n","import { Avatar } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport './Message.css'\r\n\r\n\r\n//es6 function writing\r\nconst Message = forwardRef(({id, contents: {timestamp, displayName, email, message, photo, uid} }, ref) => {\r\n  const user = useSelector(selectUser)\r\n  return (\r\n    <div\r\n    ref={ref}\r\n    className={`message ${user.email === email && 'message__sender'}`}>\r\n        <Avatar className=\"message__photo\"\r\n        src={photo}\r\n        />\r\n        <p>{message}</p>\r\n        <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Message\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyATEGy2DXBchQl-HO30fS65rOkFkSps5Yw\",\r\n    authDomain: \"imessage-app-2020.firebaseapp.com\",\r\n    databaseURL: \"https://imessage-app-2020.firebaseio.com\",\r\n    projectId: \"imessage-app-2020\",\r\n    storageBucket: \"imessage-app-2020.appspot.com\",\r\n    messagingSenderId: \"540333532175\",\r\n    appId: \"1:540333532175:web:ae8b9da739ee5b13c8af7a\",\r\n    measurementId: \"G-MBQ4JGNV7D\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import { IconButton } from '@material-ui/core';\r\nimport MicNoneIcon from '@material-ui/icons/MicNone';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Chat.css';\r\nimport { selectChatId, selectChatName } from './features/chatSlice';\r\nimport Message from './Message';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\nimport { selectUser } from './features/userSlice';\r\nimport FlipMove from 'react-flip-move';\r\n \r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const [input, setInput] = useState(\"\");\r\n    const chatName = useSelector(selectChatName);\r\n    const [messages, setMessages] = useState([]);\r\n    const chatId = useSelector(selectChatId);\r\n\r\n    useEffect(() => {\r\n        if(chatId){\r\n            db.collection('chats')\r\n            .doc(chatId)\r\n            .collection('messages')\r\n            .orderBy('timestamp', 'desc')\r\n            .onSnapshot(snapshot => (\r\n                setMessages(\r\n                    snapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    data: doc.data()\r\n                })))\r\n            ))\r\n        }\r\n    })\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n    \r\n        db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          message: input,\r\n          uid: user.uid,\r\n          photo: user.photo,\r\n          email: user.email,\r\n          displayName: user.displayName,\r\n        });\r\n    \r\n        setInput(\"\");\r\n      };\r\n    \r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <h4>To: <span className=\"chat__span\">{chatName}</span></h4>\r\n                <strong>Details</strong>\r\n            </div>\r\n\r\n            <div className=\"chat__message\">\r\n                <FlipMove>\r\n                {messages.map(({id, data}) => (\r\n                    <Message key={id} contents={data} />\r\n                ))}\r\n                </FlipMove>\r\n            </div>\r\n\r\n            {/**chat input */}\r\n            <div className=\"chat__input\">\r\n                <form>\r\n                    <input \r\n                    value={input} \r\n                    onChange={(e) => setInput(e.target.value)} \r\n                    placeholder=\"iMessage\" \r\n                    type=\"text\"\r\n                    />\r\n                    <button onClick={sendMessage}>Send Message</button>\r\n                </form>\r\n                <IconButton>\r\n                    <MicNoneIcon className=\"mic__icon\" />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {setChat} from './features/chatSlice';\r\nimport './SidebarChat.css'\r\nimport db from './firebase'\r\nimport * as timeago from 'timeago.js'\r\n\r\n\r\nfunction SidebarChat({id, chatName}) {\r\n    const dispatch = useDispatch();\r\n    const [chatInfo, setChatInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection('chats')\r\n        .doc(id)\r\n        .collection('messages')\r\n        .orderBy('timestamp', 'desc')\r\n        .onSnapshot(snapshot => (\r\n            setChatInfo(snapshot.docs.map(doc => doc.data()))\r\n        ));\r\n    }, [id])\r\n\r\n    return (\r\n        <div onClick={() => \r\n            dispatch(\r\n                setChat({\r\n                    chatId: id,\r\n                    chatName: chatName,\r\n                })\r\n        )\r\n    } \r\n    className=\"sidebarChat\">\r\n            <Avatar \r\n            src={chatInfo[0]?.photo} \r\n            className=\"sidebarChat__avatar\" />\r\n            <div className=\"sidebarChat__info\">\r\n                <h3>{chatName}</h3>\r\n                <p>{chatInfo[0]?.message}</p>\r\n                <small>{timeago.format(new Date(chatInfo[0]?.timestamp?.toDate()))}</small>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db, { auth } from \"./firebase\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"chats\").onSnapshot((snapshot) =>\r\n      setChats(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const addChat = () => {\r\n    const chatName = prompt(\"Please enter a chat name\");\r\n\r\n    if (chatName) {\r\n      db.collection(\"chats\").add({\r\n        chatName: chatName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar\r\n          onClick={() => auth.signOut()}\r\n          src={user.photo}\r\n          className=\"sidebar__avatar\"\r\n        />\r\n        <div className=\"sidebar__input\">\r\n          <SearchIcon />\r\n          <input placeholder=\"Search\" />\r\n        </div>\r\n\r\n        <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\r\n          <RateReviewOutlinedIcon onClick={addChat} />\r\n        </IconButton>\r\n      </div>\r\n\r\n      <div className=\"sidebar__chats\">\r\n        {chats.map(({ id, data: { chatName } }) => (\r\n          <SidebarChat key={id} id={id} chatName={chatName} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react'\r\nimport Chat from './Chat'\r\nimport './IMessage.css'\r\nimport Sidebar from './Sidebar'\r\n\r\nfunction IMessage() {\r\n    return (\r\n        <div className=\"imessage\">\r\n            {/**Sidebar */}\r\n            <Sidebar />\r\n            {/**Chat */}\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IMessage\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './Login.css';\r\nimport {auth, provider} from './firebase';\r\n\r\nfunction Login() {\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).catch((error)=> alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img \r\n                src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/a60c69b4-dbdc-49e3-b152-43bbdbfb0160/d6dy6qy-19e320f2-932f-4549-8050-2b7fb9289eda.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvYTYwYzY5YjQtZGJkYy00OWUzLWIxNTItNDNiYmRiZmIwMTYwXC9kNmR5NnF5LTE5ZTMyMGYyLTkzMmYtNDU0OS04MDUwLTJiN2ZiOTI4OWVkYS5wbmcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.AQSIo8n9g9HHLZFVdCwqbDOjFg9DwZI35LCTIuLgtEw\" \r\n                alt=\"\"/>\r\n                <h1>iMessage</h1>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport IMessage from \"./IMessage\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        // user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return <div className=\"app\">{user ? <IMessage /> : <Login />}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport chatReducer from \"../features/chatSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}